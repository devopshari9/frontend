# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.get_images.outputs.image_tag }}
      test_tag: ${{ steps.get_images.outputs.test_tag }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: create file
        run: |
          touch app.info
          echo "IMAGE_NAME: abc" >> app.info
          echo "IMAGE_TAG: 1.0.0" >> app.info
          echo "IMAGE_NAME: xyz" >> app.info
          echo "IMAGE_TAG: 1.0.1" >> app.info
          echo "IMAGE_NAME: xyz" >> app.info
          echo "IMAGE_TAG: 1.0.2" >> app.info
          echo "IMAGE_NAME: abc" >> app.info
          echo "IMAGE_TAG: 1.0.0" >> app.info
          echo "IMAGE_NAME: xyz" >> app.info
          echo "IMAGE_TAG: 1.0.1" >> app.info
          echo "IMAGE_NAME: xyz" >> app.info
          echo "IMAGE_TAG: 1.0.2" >> app.info

      - name: get images from app.info file
        id: get_images
        run: |
           # Initialize an array to store image-name tag pairs
           image_tag_pairs=()

           # Read the file line by line
           while IFS= read -r line; do
            # Check if the line starts with "image name:"
            if [[ $line == "IMAGE_NAME:"* ]]; then
                # Extract the image name by removing "image name:" and trimming spaces
                image_name=$(echo "$line" | sed 's/IMAGE_NAME://;s/^[[:space:]]//;s/[[:space:]]$//')
            fi

            # Check if the line starts with "tag:"
            if [[ $line == "IMAGE_TAG:"* ]]; then
                # Extract the tag by removing "tag:" and trimming spaces
                tag=$(echo "$line" | sed 's/IMAGE_TAG://;s/^[[:space:]]//;s/[[:space:]]$//')
                # Add the image name and tag as a pair to the array
                image_tag_pairs+=("$image_name:$tag")
            fi
           done < "app.info"
            #create a file
            touch image_tag.txt
            # Print the list of image-name tag pairs
            for pair in "${image_tag_pairs[@]}"; do
                echo "$pair"
                echo "$pair" >> image_tag.txt
            done
            #image_tags=$(awk -F":" '{ print $1":"$2 }' image_tag.txt | tr '\n' ',' | sed 's/,$//')
            image_tags=$(awk -F":" '{ printf "\"%s:%s\",\n", $1, $2 }' image_tag.txt | sed '$s/,$//')
            image_tags="[ $image_tags ]"
            echo $image_tags 
            echo ${image_tags}
            test_tags="[ 123, 345, 678 ]"
            echo ::set-output name=image_tag::${image_tags}
            echo ::set-output name=test_tag::${test_tags}
  scan:
    needs: build
    name:  Scan [ ${{ matrix.image_tag }}]  
    runs-on: [self-hosted] # ets-runners-prod
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix: 
        image_tag: ${{ fromJson(needs.build.outputs.test_tag) }}
          
    steps: 
      - name: Pull image
        id: pull_image
        run: |
          echo "Pulling docker image ${{ matrix.image_tag }}"
